// src/api/friends.js

const API_BASE = 'https://daring-embrace-production.up.railway.app/api/friend';

// L·∫•y danh s√°ch b·∫°n b√®
export async function getFriends() {
  // Backend: app.use('/api/friends', friendRoutes) + router.get('/friends', ...)
  // = /api/friends/friends
  const url = `${API_BASE}/friends`;
  console.log('üîç getFriends API call to:', url);
  const res = await fetch(url, {
    credentials: 'include',
  });

  if (!res.ok) {
    const errorText = await res.text();
    console.error('‚ùå getFriends API error:', res.status, errorText);
    throw new Error(
      `HTTP ${res.status}: ${errorText || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch b·∫°n b√®'}`
    );
  }

  const data = await res.json();
  console.log('‚úÖ getFriends API response:', data);
  return data;
}

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
export async function sendFriendRequest(receiverId) {
  const res = await fetch(`${API_BASE}/requests`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include',
    body: JSON.stringify({
      receiver_id: receiverId,
    }),
  });

  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.message || 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c l·ªùi m·ªùi k·∫øt b·∫°n');
  }

  return res.json();
}

// L·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ g·ª≠i
export async function getSentRequests() {
  const res = await fetch(`${API_BASE}/requests/sent`, {
    credentials: 'include',
  });

  if (!res.ok) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch l·ªùi m·ªùi ƒë√£ g·ª≠i');

  return res.json();
}

// L·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ nh·∫≠n
export async function getReceivedRequests() {
  const res = await fetch(`${API_BASE}/requests/received`, {
    credentials: 'include',
  });

  if (!res.ok) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch l·ªùi m·ªùi ƒë√£ nh·∫≠n');

  return res.json();
}

// Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
export async function acceptFriendRequest(requestId) {
  console.log('üîç Calling acceptFriendRequest:', requestId);
  console.log('üîç URL:', `${API_BASE}/requests/${requestId}/accept`);

  try {
    const res = await fetch(`${API_BASE}/requests/${requestId}/accept`, {
      method: 'PUT',
      credentials: 'include',
    });

    console.log('üîç Response status:', res.status);

    if (!res.ok) {
      const error = await res.json();
      console.error('üîç API Error:', error);
      throw new Error(error.message || 'Kh√¥ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c l·ªùi m·ªùi k·∫øt b·∫°n');
    }

    const result = await res.json();
    console.log('üîç Success result:', result);
    return result;
  } catch (error) {
    console.error('üîç Fetch Error:', error);
    throw error;
  }
}

// T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
export async function declineFriendRequest(requestId) {
  const res = await fetch(`${API_BASE}/requests/${requestId}/decline`, {
    method: 'PUT',
    credentials: 'include',
  });

  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.message || 'Kh√¥ng t·ª´ ch·ªëi ƒë∆∞·ª£c l·ªùi m·ªùi k·∫øt b·∫°n');
  }

  return res.json();
}

// H·ªßy k·∫øt b·∫°n
export async function unfriend(friendId) {
  const res = await fetch(`${API_BASE}/friends/${friendId}`, {
    method: 'DELETE',
    credentials: 'include',
  });

  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.message || 'Kh√¥ng h·ªßy ƒë∆∞·ª£c k·∫øt b·∫°n');
  }

  return res.json();
}

// L·∫•y danh s√°ch t·∫•t c·∫£ users (ƒë·ªÉ t√¨m ki·∫øm)
export async function getAllUsers(search = '') {
  const url = new URL(`${API_BASE}/users`);
  if (search) {
    url.searchParams.append('search', search);
  }

  const res = await fetch(url, {
    credentials: 'include',
  });

  if (!res.ok) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng');

  return res.json();
}
