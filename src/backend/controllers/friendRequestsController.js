const db = require('../config/db');
const SocketNotificationService = require('../services/SocketNotificationService');

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
exports.sendFriendRequest = async (req, res) => {
  const { receiver_id } = req.body;
  const sender_id = req.user.id;

  console.log('üîç sendFriendRequest - req.io exists:', !!req.io);
  console.log('üîç sendFriendRequest - io type:', typeof req.io);

  if (sender_id === receiver_id) {
    return res
      .status(400)
      .json({ message: 'Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n cho ch√≠nh m√¨nh' });
  }

  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ l·ªùi m·ªùi n√†o ch∆∞a
    const [existing] = await db.execute(
      `SELECT * FROM friend_requests 
       WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?)`,
      [sender_id, receiver_id, receiver_id, sender_id]
    );

    if (existing.length > 0) {
      const request = existing[0];
      if (request.status === 'accepted') {
        return res.status(400).json({ message: 'ƒê√£ l√† b·∫°n b√®' });
      } else if (request.status === 'pending') {
        return res.status(400).json({ message: 'L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
      }
    }

    // T·∫°o l·ªùi m·ªùi k·∫øt b·∫°n m·ªõi
    await db.execute(
      `INSERT INTO friend_requests (sender_id, receiver_id, status, created_at, updated_at)
       VALUES (?, ?, 'pending', NOW(), NOW())`,
      [sender_id, receiver_id]
    );

    // Get sender info for notification
    const [senderInfo] = await db.execute(
      `SELECT u.email, p.full_name FROM users u
       LEFT JOIN profile p ON u.id = p.user_id
       WHERE u.id = ?`,
      [sender_id]
    );

    // Send real-time notification to receiver
    if (req.io && senderInfo.length > 0) {
      const senderData = {
        id: sender_id,
        name: senderInfo[0].full_name || senderInfo[0].email,
        email: senderInfo[0].email,
        avatar: senderInfo[0].avatar_url || null,
      };

      console.log(
        `üì® Sending friend request notification to user ${receiver_id}:`,
        senderData
      );

      // Use SocketNotificationService
      const socketNotificationService = new SocketNotificationService(req.io);
      await socketNotificationService.sendFriendRequestNotification(
        receiver_id,
        senderData
      );

      console.log(`üì® Friend request notification sent to user ${receiver_id}`);
    } else {
      console.log('‚ùå Cannot send notification - missing io or sender info');
      console.log('üîç req.io exists:', !!req.io);
      console.log('üîç senderInfo length:', senderInfo.length);
    }

    res.status(201).json({ message: 'G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// L·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ g·ª≠i
exports.getSentRequests = async (req, res) => {
  const user_id = req.user.id;

  try {
    const [requests] = await db.execute(
      `SELECT fr.id, fr.receiver_id, fr.status, fr.created_at, fr.updated_at,
              u.email, p.full_name, p.avatar_url
       FROM friend_requests fr
       JOIN users u ON fr.receiver_id = u.id
       LEFT JOIN profile p ON u.id = p.user_id
       WHERE fr.sender_id = ? AND fr.status = 'pending'
       ORDER BY fr.created_at DESC`,
      [user_id]
    );

    res.json(requests);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ g·ª≠i:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// L·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ nh·∫≠n
exports.getReceivedRequests = async (req, res) => {
  const user_id = req.user.id;

  try {
    const [requests] = await db.execute(
      `SELECT fr.id, fr.sender_id, fr.status, fr.created_at, fr.updated_at,
              u.email, p.full_name, p.avatar_url
       FROM friend_requests fr
       JOIN users u ON fr.sender_id = u.id
       LEFT JOIN profile p ON u.id = p.user_id
       WHERE fr.receiver_id = ? AND fr.status = 'pending'
       ORDER BY fr.created_at DESC`,
      [user_id]
    );

    res.json(requests);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªùi m·ªùi ƒë√£ nh·∫≠n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
exports.acceptFriendRequest = async (req, res) => {
  const { request_id } = req.params;
  const user_id = req.user.id;

  try {
    // Ki·ªÉm tra l·ªùi m·ªùi c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
    const [request] = await db.execute(
      `SELECT * FROM friend_requests 
       WHERE id = ? AND receiver_id = ? AND status = 'pending'`,
      [request_id, user_id]
    );

    if (request.length === 0) {
      return res
        .status(404)
        .json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh accepted
    await db.execute(
      `UPDATE friend_requests
       SET status = 'accepted', updated_at = NOW()
       WHERE id = ?`,
      [request_id]
    );

    // Get accepter info for notification
    const [accepterInfo] = await db.execute(
      `SELECT u.email, p.full_name, p.avatar_url FROM users u
       LEFT JOIN profile p ON u.id = p.user_id
       WHERE u.id = ?`,
      [user_id]
    );

    // Send real-time notification to sender
    if (req.io && accepterInfo.length > 0) {
      const accepterData = {
        id: user_id,
        name: accepterInfo[0].full_name || accepterInfo[0].email,
        email: accepterInfo[0].email,
        avatar: accepterInfo[0].avatar_url || null,
      };

      const senderId = request[0].sender_id;
      const socketNotificationService = new SocketNotificationService(req.io);
      await socketNotificationService.sendFriendAcceptedNotification(
        senderId,
        accepterData
      );

      console.log(
        `‚úÖ Friend request accepted notification sent to user ${senderId}`
      );
    }

    res.json({ message: 'Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
exports.declineFriendRequest = async (req, res) => {
  const { request_id } = req.params;
  const user_id = req.user.id;

  try {
    // Ki·ªÉm tra l·ªùi m·ªùi c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
    const [request] = await db.execute(
      `SELECT * FROM friend_requests 
       WHERE id = ? AND receiver_id = ? AND status = 'pending'`,
      [request_id, user_id]
    );

    if (request.length === 0) {
      return res
        .status(404)
        .json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n' });
    }

    // Get decliner info for notification
    const [declinerInfo] = await db.execute(
      `SELECT u.email, p.full_name, p.avatar_url FROM users u
       LEFT JOIN profile p ON u.id = p.user_id
       WHERE u.id = ?`,
      [user_id]
    );

    // Send real-time notification to sender
    if (req.io && declinerInfo.length > 0) {
      const declinerData = {
        id: user_id,
        name: declinerInfo[0].full_name || declinerInfo[0].email,
        email: declinerInfo[0].email,
        avatar: declinerInfo[0].avatar_url || null,
      };

      const senderId = request[0].sender_id;
      const socketNotificationService = new SocketNotificationService(req.io);
      await socketNotificationService.sendFriendDeclinedNotification(
        senderId,
        declinerData
      );

      console.log(
        `‚ùå Friend request declined notification sent to user ${senderId}`
      );
    }

    // X√≥a l·ªùi m·ªùi k·∫øt b·∫°n
    await db.execute(`DELETE FROM friend_requests WHERE id = ?`, [request_id]);

    res.json({ message: 'T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};
